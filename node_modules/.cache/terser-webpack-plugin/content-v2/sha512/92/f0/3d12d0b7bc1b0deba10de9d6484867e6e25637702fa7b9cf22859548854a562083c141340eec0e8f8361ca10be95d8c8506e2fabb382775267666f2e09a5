{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{256:function(t,a,e){\"use strict\";e.r(a);var n=e(0),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"contents\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#contents\"}},[t._v(\"#\")]),t._v(\" Contents\")]),t._v(\" \"),e(\"p\"),e(\"div\",{staticClass:\"table-of-contents\"},[e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#hello-world\"}},[t._v(\"Hello World\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#input-output-cin-cout\"}},[t._v(\"Input & Output (cin & cout)\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#data-types\"}},[t._v(\"Data Types\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#if-condition\"}},[t._v(\"If Condition\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#for-loop\"}},[t._v(\"For Loop\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#find-max-algorithm\"}},[t._v(\"Find Max Algorithm\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#pointer\"}},[t._v(\"Pointer\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#arrays\"}},[t._v(\"Arrays\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#variable-sized-arrays\"}},[t._v(\"Variable Sized Arrays\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#strings\"}},[t._v(\"Strings\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#attribute-parser\"}},[t._v(\"Attribute Parser\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#string-stream\"}},[t._v(\"String Stream\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#structs\"}},[t._v(\"Structs\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#class\"}},[t._v(\"Class\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#classes-and-objects\"}},[t._v(\"Classes and Objects\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#box-it\"}},[t._v(\"Box it\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])]),e(\"li\",[e(\"a\",{attrs:{href:\"#vector-sort\"}},[t._v(\"Vector-Sort\")]),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"#challange\"}},[t._v(\"Challange\")])]),e(\"li\",[e(\"a\",{attrs:{href:\"#solution\"}},[t._v(\"Solution\")])])])])])]),e(\"p\"),t._v(\" \"),e(\"h2\",{attrs:{id:\"hello-world\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hello-world\"}},[t._v(\"#\")]),t._v(\" Hello World\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"objective\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#objective\"}},[t._v(\"#\")]),t._v(\" Objective\")]),t._v(\" \"),e(\"p\",[t._v(\"This is a simple challenge to help you practice printing to stdout. You may also want to complete Solve Me First in C++ before attempting this challenge.\")]),t._v(\" \"),e(\"p\",[t._v(\"We're starting out by printing the most famous computing phrase of all time! In the editor below, use either printf or cout to print the string  to stdout.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"You do not need to read any input in this challenge.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Print  to \"),e(\"code\",[t._v(\"Hello, World!\")]),t._v(\" stdout.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-output\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"Hello, World!\\n\")])])]),e(\"h3\",{attrs:{id:\"solution\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <iostream>\\n#include <cstdio>\\nusing namespace std;\\n\\nint main() {\\n    cout << \"Hello, World!\" << endl;\\n    return 0;\\n}\\n\\n')])])]),e(\"h2\",{attrs:{id:\"input-output-cin-cout\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-output-cin-cout\"}},[t._v(\"#\")]),t._v(\" Input & Output (cin & cout)\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-2\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"objective-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#objective-2\"}},[t._v(\"#\")]),t._v(\" Objective\")]),t._v(\" \"),e(\"p\",[t._v(\"In this challenge, we're practicing reading input from stdin and printing output to stdout.\\n\")]),e(\"hr\"),t._v(\"\\nIn C++, you can read a single whitespace-separated token of input using cin, and print output to stdout using cout. For example, let's say we declare the following variables:\"),e(\"p\"),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"string s;\\nint n;\\n\")])])]),e(\"p\",[t._v('and we want to use cin to read the input \"High 5\" from stdin. We can do this with the following code:')]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"cin >> s >> n;\\n\")])])]),e(\"p\",[t._v('The above code reads the first word (\"High\") from stdin and saves it as string , then reads the second word (\"\") from stdin and saves it as integer . If we want to print these values to stdout, we write the following code:')]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('cout << s << \" \" << n << endl;\\n')])])]),e(\"p\",[t._v('The above code prints the contents of string , which is the word \"High\". Then it prints a single space (), followed by the contents of integer . Because we also want to ensure that nothing else is printed on this line, we end our line of output with a newline via endl. This results in the following output:')]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"High 5\\n\")])])]),e(\"h4\",{attrs:{id:\"task\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#task\"}},[t._v(\"#\")]),t._v(\" Task\")]),t._v(\" \"),e(\"p\",[t._v(\"Read  numbers from stdin and print their sum to stdout.\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"Note\")]),t._v(\": If you plan on completing this challenge in C instead of C++, you'll need to use format specifiers with printf and scanf.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-2\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"A single line containing  space-separated integers: , , and .\")]),t._v(\" \"),e(\"p\",[t._v(\"####Constraints\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"1<= a,b,c <=1000\\n\")])])]),e(\"h4\",{attrs:{id:\"output-format-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-2\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Print the sum of the three numbers on a single line.\\nSample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"1 2 7\\n\")])])]),e(\"p\",[t._v(\"Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"10\\n\")])])]),e(\"h4\",{attrs:{id:\"explanation\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#explanation\"}},[t._v(\"#\")]),t._v(\" Explanation\")]),t._v(\" \"),e(\"p\",[t._v(\"The sum of the three numbers is 1+2+7=10\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"solution-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-2\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"#include <cmath>\\n#include <cstdio>\\n#include <vector>\\n#include <iostream>\\n#include <algorithm>\\nusing namespace std;\\n\\n\\nint main() {\\n    int i = 0;\\n    int sum = 0;\\n    //sum of\\n    while (cin >> i) {\\n        sum += i;\\n    }\\n\\n    cout << sum << endl;\\n\\n    return 0;\\n}\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"data-types\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#data-types\"}},[t._v(\"#\")]),t._v(\" Data Types\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-3\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-3\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"Some C++ data types, their format specifiers, and their most common bit widths are as follows:\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v('Int (\"%d\"): 32 Bit integer')]),t._v(\" \"),e(\"li\",[t._v('Long (\"%ld\"): 64 bit integer')]),t._v(\" \"),e(\"li\",[t._v('Char (\"%c\"): Character type')]),t._v(\" \"),e(\"li\",[t._v('Float (\"%f\"): 32 bit real value')]),t._v(\" \"),e(\"li\",[t._v('Double (\"%lf\"): 64 bit real value')])]),t._v(\" \"),e(\"h4\",{attrs:{id:\"reading\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#reading\"}},[t._v(\"#\")]),t._v(\" Reading\")]),t._v(\" \"),e(\"p\",[t._v(\"To read a data type, use the following syntax:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('scanf(\"`format_specifier`\", &val)\\n')])])]),e(\"p\",[t._v(\"For example, to read a character followed by a double:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('char ch;\\ndouble d;\\nscanf(\"%c %lf\", &ch, &d);\\n')])])]),e(\"p\",[t._v(\"For the moment, we can ignore the spacing between format specifiers.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"printing\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#printing\"}},[t._v(\"#\")]),t._v(\" Printing\")]),t._v(\" \"),e(\"p\",[t._v(\"To print a data type, use the following syntax:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('printf(\"`format_specifier`\", val)\\n')])])]),e(\"p\",[t._v(\"For example, to print a character followed by a double:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"char ch = 'd';\\ndouble d = 234.432;\\nprintf(\\\"%c %lf\\\", ch, d);\\n\")])])]),e(\"p\",[t._v(\"Note: You can also use cin and cout instead of scanf and printf; however, if you are taking a million numbers as input and printing a million lines, it is faster to use scanf and printf.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-3\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-3\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Input consists of the following space-separated values: int, long, char, float, and double, respectively.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-3\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-3\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Print each element on a new line in the same order it was received as input. Note that the floating point value should be correct up to 3 decimal places and the double to 9 decimal places.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"3 12345678912345 a 334.23 14049.30493\\n\")])])]),e(\"h4\",{attrs:{id:\"sample-output-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-2\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"3\\n12345678912345\\na\\n334.230\\n14049.304930000\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-3\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-3\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <iostream>\\n#include <cstdio>\\nusing namespace std;\\n\\nint main() {\\n    int i; long l; char c; float f; double d;\\n    //input\\n    cin>>i>>l>>c>>f>>d;\\n    //output\\n    printf(\"%d\\\\n%ld\\\\n%c\\\\n%3f\\\\n%9lf\", i, l, c, f, d);\\n    return 0;\\n}\\n')])])]),e(\"h2\",{attrs:{id:\"if-condition\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#if-condition\"}},[t._v(\"#\")]),t._v(\" If Condition\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-4\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-4\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"if and else are two of the most frequently used conditionals in C/C++, and they enable you to execute zero or one conditional statement among many such dependent conditional statements. We use them in the following ways:\")]),t._v(\" \"),e(\"p\",[t._v(\"if: This executes the body of bracketed code starting with  if  evaluates to true.\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"if (condition) {\\n    statement1;\\n    ...\\n}\\n\")])])]),e(\"p\",[t._v(\"if - else: This executes the body of bracketed code starting with  if  evaluates to true, or it executes the body of code starting with  if  evaluates to false. Note that only one of the bracketed code sections will ever be executed.\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"if (condition) {\\n    statement1;\\n    ...\\n}\\nelse {\\n    statement2;\\n    ...\\n}\\n\")])])]),e(\"p\",[t._v(\"if - else if - else: In this structure, dependent statements are chained together and the  for each statement is only checked if all prior conditions in the chain evaluated to false. Once a  evaluates to true, the bracketed code associated with that statement is executed and the program then skips to the end of the chain of statements and continues executing. If each  in the chain evaluates to false, then the body of bracketed code in the else block at the end is executed.\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"if(first condition) {\\n    ...\\n}\\nelse if(second condition) {\\n    ...\\n}\\n.\\n.\\n.\\nelse if((n-1)'th condition) {\\n    ....\\n}\\nelse {\\n    ...\\n}\\n\")])])]),e(\"p\",[t._v(\"Given a positive integer denoting , do the following:\\nIf , then print the lowercase English word corresponding to the number (e.g., one for , two for , etc.).\\nIf , print Greater than 9.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-4\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-4\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"A single integer denoting .\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"constraints\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#constraints\"}},[t._v(\"#\")]),t._v(\" Constraints\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"1<=n<=pow(10, 9)\")])]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-4\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-4\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"If , then print the lowercase English word corresponding to the number (e.g., one for , two for , etc.); otherwise, print Greater than 9 instead.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-0\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-0\"}},[t._v(\"#\")]),t._v(\" Sample Input 0\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"5\")])]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-output-0\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-0\"}},[t._v(\"#\")]),t._v(\" Sample Output 0\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"five\")])]),t._v(\" \"),e(\"h4\",{attrs:{id:\"explanation-0\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#explanation-0\"}},[t._v(\"#\")]),t._v(\" Explanation 0\")]),t._v(\" \"),e(\"p\",[t._v(\"five is the English word for the number .\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-1\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-1\"}},[t._v(\"#\")]),t._v(\" Sample Input 1\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"8\")])]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-output-1\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-1\"}},[t._v(\"#\")]),t._v(\" Sample Output 1\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"eight\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"solution-4\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-4\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <bits/stdc++.h>\\n#include <iostream>\\n#include <cstdio>\\n\\nusing namespace std;\\n\\n\\n\\nint main()\\n{\\n    int n;\\n    cin >> n;\\n    cin.ignore(numeric_limits<streamsize>::max(), \\'\\\\n\\');\\n\\n    if (n == 1) {\\n        printf(\"one\");\\n    } else if (n==2) {\\n        printf(\"two\");\\n    } else if (n==3) {\\n        printf(\"three\");\\n    } else if (n==4) {\\n        printf(\"four\");\\n    } else if (n==5) {\\n        printf(\"five\");\\n    } else if (n==6) {\\n        printf(\"six\");\\n    } else if (n==7) {\\n        printf(\"seven\");\\n    } else if (n==8) {\\n        printf(\"eight\");\\n    } else if (n==9) {\\n        printf(\"nine\");\\n    } else {\\n        printf(\"Greater than 9\");\\n    }\\n\\n    return 0;\\n}\\n')])])]),e(\"h2\",{attrs:{id:\"for-loop\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#for-loop\"}},[t._v(\"#\")]),t._v(\" For Loop\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-5\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-5\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"A for loop is a programming language statement which allows code to be repeatedly executed.\")]),t._v(\" \"),e(\"p\",[t._v(\"The syntax for this is\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"for ( <expression_1> ; <expression_2> ; <expression_3> )\\n    <statement>\\n\")])])]),e(\"p\",[e(\"code\",[t._v(\"expression_1\")]),t._v(\" is used for intializing variables which are generally used for controlling terminating flag for the loop.\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"expression_2\")]),t._v(\" is used to check for the terminating condition. If this evaluates to false, then the loop is terminated.\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"expression_3\")]),t._v(\" is generally used to update the flags/variables.\")]),t._v(\" \"),e(\"p\",[t._v(\"A sample loop will be\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"for(int i = 0; i < 10; i++) {\\n    ...\\n}\\n\")])])]),e(\"h4\",{attrs:{id:\"input-format-5\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-5\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"You will be given two positive integers,  and  (), separated by a newline.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-5\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-5\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"For each integer  in the interval  :\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[t._v('If , then print the English representation of it in lowercase. That is \"one\" for , \"two\" for , and so on.')])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v('Else if  and it is an even number, then print \"even\".')])]),t._v(\" \"),e(\"li\",[e(\"p\",[t._v('Else if  and it is an odd number, then print \"odd\".')])])]),t._v(\" \"),e(\"p\",[t._v(\"Note:\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-2\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"8\\n11\\n\")])])]),e(\"h4\",{attrs:{id:\"sample-output-3\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-3\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"eight\\nnine\\neven\\nodd\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-5\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-5\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <iostream>\\n#include <cstdio>\\n#include <string>\\n#include <array>\\nusing namespace std;\\n\\n//number and speeling structure\\nstruct numberDictionary {\\n    int number;\\n    string dict;\\n};\\n\\n\\n// number convert speeling word function\\nstring numberToEnglish(int n) {\\n    struct numberDictionary NatureNumbers[10] = {\\n            {1, \"one\"},\\n            {2, \"two\"},\\n            {3, \"three\"},\\n            {4, \"four\"},\\n            {5, \"five\"},\\n            {6, \"six\"},\\n            {7, \"seven\"},\\n            {8, \"eight\"},\\n            {9, \"nine\"},\\n    };\\n    for (int i=0;i<10;i++) {\\n        if (NatureNumbers[i].number == n) {\\n            return NatureNumbers[i].dict;\\n        }\\n    }\\n    return \"\";\\n}\\n\\nint main() {\\n    std::array<int,2> numberArray;\\n    cin>>numberArray[0];\\n    cin>>numberArray[1];\\n\\n    //control\\n    for (int i=numberArray[0]; i<=numberArray[1];i++) {\\n        if (i >0 && i < 10) {\\n            cout << numberToEnglish(i) << endl;\\n        }\\n        if (i > 9 && i % 2 == 0) {\\n            cout << \"even\" << endl;\\n        }\\n        if (i > 9 && i % 2 != 0) {\\n            cout << \"odd\" << endl;\\n        }\\n    }\\n\\n    return 0;\\n}\\n')])])]),e(\"h2\",{attrs:{id:\"find-max-algorithm\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#find-max-algorithm\"}},[t._v(\"#\")]),t._v(\" Find Max Algorithm\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-6\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-6\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"Functions are a bunch of statements glued together. A function is provided with zero or more arguments, and it executes the statements on it. Based on the return type, it either returns nothing (void) or something.\")]),t._v(\" \"),e(\"p\",[t._v(\"A sample syntax for a function is\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"return_type function_name(arg_type_1 arg_1, arg_type_2 arg_2, ...) {\\n    ...\\n    ...\\n    ...\\n    [if return_type is non void]\\n        return something of type `return_type`;\\n}\\n\")])])]),e(\"p\",[t._v(\"For example, a function to read four variables and return the sum of them can be written as\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"int sum_of_four(int a, int b, int c, int d) {\\n    int sum = 0;\\n    sum += a;\\n    sum += b;\\n    sum += c;\\n    sum += d;\\n    return sum;\\n}\\n\")])])]),e(\"p\",[t._v(\"You have to write a function int max_of_four(int a, int b, int c, int d) which reads four arguments and returns the greatest of them.\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"+= :\")]),t._v(\" Add and assignment operator. It adds the right operand to the left operand and assigns the result to the left operand.\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"a += b\")]),t._v(\" is equivalent to \"),e(\"code\",[t._v(\"a = a + b\")]),t._v(\";\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-6\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-6\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Input will contain four integers -  , one in each line.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-6\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-6\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Print the greatest of the four integers.\\nPS: I/O will be automatically handled.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-3\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-3\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"3\\n4\\n6\\n5\\n\")])])]),e(\"h4\",{attrs:{id:\"sample-output-4\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-4\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"6\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-6\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-6\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <iostream>\\n#include <cstdio>\\nusing namespace std;\\n\\nint max_of_four(int a, int b, int c, int d) {\\n    //max is first element\\n    int max = a;\\n\\n    //check most big number\\n    if (max<b){\\n        max = b;\\n    }\\n    if (max<c) {\\n        max = c;\\n    }\\n    if (max<d) {\\n        max = d;\\n    }\\n    return max;\\n}\\n\\nint main() {\\n    //get numbers\\n    int a, b, c, d;\\n    scanf(\"%d %d %d %d\", &a, &b, &c, &d);\\n    //find max\\n    int ans = max_of_four(a, b, c, d);\\n    printf(\"%d\", ans);\\n\\n    return 0;\\n}\\n')])])]),e(\"h2\",{attrs:{id:\"pointer\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#pointer\"}},[t._v(\"#\")]),t._v(\" Pointer\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-7\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-7\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"A pointer in C is a way to share a memory address among different contexts (primarily functions). They are primarily used whenever a function needs to modify the content of a variable, of which it doesn't have ownership.\")]),t._v(\" \"),e(\"p\",[t._v(\"In order to access the memory address of a variable, , we need to prepend it with  sign. E.g., &val returns the memory address of .\")]),t._v(\" \"),e(\"p\",[t._v(\"This memory address is assigned to a pointer and can be shared among various functions. E.g.  will assign the memory address of  to pointer . To access the content of the memory to which the pointer points, prepend it with a *. For example, *p will return the value reflected by  and any modification to it will be reflected at the source ().\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('void increment(int *v) {\\n    (*v)++;\\n}\\n\\nint main() {\\n    int a;\\n    scanf(\"%d\", &a);\\n    increment(&a);\\n    printf(\"%d\", a);\\n    return 0;\\n}\\n')])])]),e(\"p\",[t._v(\"You have to complete the function void update(int *a,int *b), which reads two integers as argument, and sets  with the sum of them, and  with the absolute difference of them.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-7\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-7\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Input will contain two integers,  and , separated by a newline.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-7\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-7\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"You have to print the updated value of  and , on two different lines.\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"P.S.:\")]),t._v(\" Input/ouput will be automatically handled. You only have to complete the void update(int *a,int *b) function.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-4\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-4\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"4\\n5\\n\\n\")])])]),e(\"h4\",{attrs:{id:\"sample-output-5\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-5\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"9\\n1\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-7\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-7\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <stdio.h>\\n\\nvoid update(int *a,int *b) {\\n    //two variable collect pointer values\\n    *a = *a + *b;\\n    // two variable extract pointer values\\n    *b = *a - *b - *b;\\n    // if result is negative. number multiply with -1\\n    if (*b < 0){*b = *b * -1;}\\n}\\n\\nint main() {\\n    //create a and b variable\\n    int a, b;\\n    int *pa = &a, *pb = &b;\\n\\n    scanf(\"%d %d\", &a, &b);\\n    //update function\\n\\n    update(pa, pb);\\n    printf(\"%d\\\\n%d\", a, b);\\n\\n    return 0;\\n}\\n')])])]),e(\"h2\",{attrs:{id:\"arrays\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#arrays\"}},[t._v(\"#\")]),t._v(\" Arrays\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-8\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-8\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"An array is a series of elements of the same type placed in contiguous memory locations that can be individually referenced by adding an index to a unique identifier.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"declaration\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#declaration\"}},[t._v(\"#\")]),t._v(\" Declaration:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"int arr[10]; //Declares an array named arr of size 10, i.e; you can store 10 integers.\\n\")])])]),e(\"p\",[t._v(\"Accessing elements of an array:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"Indexing in arrays starts from 0.So the first element is stored at arr[0],the second element at arr[1]...arr[9]\\n\\n\")])])]),e(\"p\",[t._v(\"You'll be given an array of  integers and you have to print the integers in the reverse order.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-8\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-8\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"The first line of the input contains ,where  is the number of integers.The next line contains  integers separated by a space.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-8\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-8\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Print the  integers of the array in the reverse order in a single line separated by a space.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-5\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-5\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"4\\n1 4 3 2\\n\")])])]),e(\"h4\",{attrs:{id:\"sample-output-6\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-6\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"2 3 4 1\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-8\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-8\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <cmath>\\n#include <cstdio>\\n#include <vector>\\n#include <iostream>\\n#include <algorithm>\\nusing namespace std;\\n\\n\\nint main() {\\n\\n    // get line number\\n    int n;\\n    cin >> n;\\n\\n    //array create and fill\\n    int arr[n];\\n    for (int i=0;i<n;i++) {\\n        cin >> arr[i];\\n    }\\n\\n    //print reversely\\n    for(int i=n-1;i>=0;i--) {\\n        cout << arr[i] << \" \";\\n    }\\n    return 0;\\n}\\n\\n')])])]),e(\"h2\",{attrs:{id:\"variable-sized-arrays\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#variable-sized-arrays\"}},[t._v(\"#\")]),t._v(\" Variable Sized Arrays\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-9\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-9\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"Consider an -element array, , where each index  in the array contains a reference to an array of  integers (where the value of  varies from array to array). See the Explanation section below for a diagram.\\nGiven , you must answer  queries. Each query is in the format i j, where  denotes an index in array  and  denotes an index in the array located at . For each query, find and print the value of element  in the array at location  on a new line.\\nClick here to know more about how to create variable sized arrays in C++.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-9\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-9\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"The first line contains two space-separated integers denoting the respective values of  (the number of variable-length arrays) and  (the number of queries).\\nEach line  of the  subsequent lines contains a space-separated sequence in the format k a[i]0 a[i]1 … a[i]k-1 describing the -element array located at .\\nEach of the  subsequent lines contains two space-separated integers describing the respective values of  (an index in array ) and  (an index in the array referenced by ) for a query.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-9\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-9\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"For each pair of  and  values (i.e., for each query), print a single integer denoting the element located at index  of the array referenced by . There should be a total of  lines of output.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-6\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-6\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"2 2\\n3 1 5 4\\n5 1 2 8 9 3\\n0 1\\n1 3\\n\")])])]),e(\"h4\",{attrs:{id:\"sample-output-7\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-7\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"5\\n9\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-9\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-9\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"#include <iostream>\\n#include <vector>\\n\\nusing namespace std;\\n\\nint main() {\\n    // get length of array 'a' and number of queries\\n    int n, q;\\n    cin >> n >> q;\\n\\n    // create vector of vectors\\n    vector<vector<int>> a(n);\\n\\n    // fill each 2D vector i with k_i values\\n    for (int i = 0; i < n; i++) {\\n        // get the length k of the vector at a[i]\\n        int k;\\n        cin >> k;\\n\\n        // fill the vector with k values\\n        a[i].resize(k);\\n        for (int j = 0; j < k; j++) {\\n            cin >> a[i][j];\\n        }\\n    }\\n\\n    // run queries on a\\n    for (int q_num = 0; q_num < q; q_num++) {\\n        // get i, j as the 'query' to get a value from a\\n        int i, j;\\n        cin >> i >> j;\\n        cout << a[i][j] << endl;\\n    }\\n\\n    return 0;\\n}\\n\")])])]),e(\"h2\",{attrs:{id:\"strings\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#strings\"}},[t._v(\"#\")]),t._v(\" Strings\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-10\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-10\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"C++ provides a nice alternative data type to manipulate strings, and the data type is conveniently called string. Some of its widely used features are the following:\")]),t._v(\" \"),e(\"p\",[t._v(\"Declaration:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('string a = \"abc\";\\nSize:\\nint len = a.size();\\n')])])]),e(\"p\",[t._v(\"Concatenate two strings:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('string a = \"abc\";\\nstring b = \"def\";\\nstring c = a + b; // c = \"abcdef\".\\n')])])]),e(\"p\",[t._v(\"Accessing  element:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"string s = \\\"abc\\\";\\nchar   c0 = s[0];   // c0 = 'a'\\nchar   c1 = s[1];   // c1 = 'b'\\nchar   c2 = s[2];   // c2 = 'c'\\n\\ns[0] = 'z';         // s = \\\"zbc\\\"\\n\")])])]),e(\"p\",[t._v(\"P.S.: We will use cin/cout to read/write a string.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-10\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-10\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"You are given two strings,  and , separated by a new line. Each string will consist of lower case Latin characters ('a'-'z').\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-10\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-10\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"In the first line print two space-separated integers, representing the length of  and  respectively.\")]),t._v(\" \"),e(\"p\",[t._v(\"In the second line print the string produced by concatenating  and  ().\")]),t._v(\" \"),e(\"p\",[t._v(\"In the third line print two strings separated by a space,  and .  and  are the same as  and , respectively, except that their first characters are swapped.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-7\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-7\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"abcd\\nef\\n\")])])]),e(\"h4\",{attrs:{id:\"sample-output-8\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-8\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"4 2\\nabcdef\\nebcd af\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-10\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-10\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"#include <iostream>\\n#include <string>\\nusing namespace std;\\n\\nint main() {\\n    // variables\\n    int len, len2;\\n\\n    // get the string\\n    string a, b;\\n    cin >> a >>  b;\\n\\n    //print sizes\\n    len = a.size();\\n    len2 = b.size();\\n    cout << len << \\\" \\\" << len2 << endl;\\n\\n    // print total string\\n    cout << a +b <<endl;\\n\\n    //swap first values from strings\\n    swap( a[0], b[0]);\\n    cout << a << ' ' <<  b << endl;\\n    return 0;\\n}\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"attribute-parser\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#attribute-parser\"}},[t._v(\"#\")]),t._v(\" Attribute Parser\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-11\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-11\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"We have defined our own markup language HRML. In HRML, each element consists of a starting and ending tag, and there are attributes associated with each tag. Only starting tags can have attributes. We can call an attribute by referencing the tag, followed by a tilde, '~' and the name of the attribute. The tags may also be nested.\")]),t._v(\" \"),e(\"p\",[t._v(\"The opening tags follow the format:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<tag-name attribute1-name = \"value1\" attribute2-name = \"value2\" ...>\\n\\n')])])]),e(\"p\",[t._v(\"The closing tags follow the format:\\n\"),e(\"code\",[t._v(\"</tag-name>\")])]),t._v(\" \"),e(\"p\",[t._v(\"For example:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<tag1 value = \"HelloWorld\">\\n<tag2 name = \"Name1\">\\n</tag2>\\n</tag1>\\n')])])]),e(\"p\",[t._v(\"The attributes are referenced as:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"tag1~value\\ntag1.tag2~name\\n\")])])]),e(\"p\",[t._v('You are given the source code in HRML format consisting of  lines. You have to answer  queries. Each query asks you to print the value of the attribute specified. Print \"Not Found!\" if there isn\\'t any such attribute.')]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-11\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-11\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"The first line consists of two space separated integers,  and .  specifies the number of lines in the HRML source program.  specifies the number of queries.\")]),t._v(\" \"),e(\"p\",[t._v(\"The following  lines consist of either an opening tag with zero or more attributes or a closing tag.There is a space after the tag-name, attribute-name, '=' and value.There is no space after the last value. If there are no attributes there is no space after tag name.\\nqueries follow. Each query consists of string that references an attribute in the source program.More formally, each query is of the form  ~ where  and  are valid tags in the input.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"constraints-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#constraints-2\"}},[t._v(\"#\")]),t._v(\" Constraints\")]),t._v(\" \"),e(\"p\",[t._v(\"Each line in the source program contains, at max,  characters.\\nEvery reference to the attributes in the  queries contains at max  characters.\\nAll tag names are unique and the HRML source program is logically correct.\\nA tag can have no attributes as well.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-11\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-11\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v('Print the value of the attribute for each query. Print \"Not Found!\" without quotes if there is no such attribute in the source program.')]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-8\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-8\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('4 3\\n<tag1 value = \"HelloWorld\">\\n<tag2 name = \"Name1\">\\n</tag2>\\n</tag1>\\ntag1.tag2~name\\ntag1~name\\ntag1~value\\n')])])]),e(\"h4\",{attrs:{id:\"sample-output-9\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-9\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"Name1\\nNot Found!\\nHelloWorld\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-11\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-11\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"p\",[t._v(\"You can help me with this problem. For helping \"),e(\"a\",{attrs:{href:\"https://github.com/kevsersrca/Hackerrank-cpp-challenges\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Hackerrank-challanges\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"h2\",{attrs:{id:\"string-stream\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#string-stream\"}},[t._v(\"#\")]),t._v(\" String Stream\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-12\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-12\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"stringstream is a stream class to operate on strings. It basically implements input/output operations on memory (string) based streams. stringstream can be helpful in different type of parsing. The following operators/functions are commonly used here\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"Operator >> Extracts formatted data.\")]),t._v(\" \"),e(\"li\",[t._v(\"Operator << Inserts formatted data.\")]),t._v(\" \"),e(\"li\",[t._v(\"Method str() Gets the contents of underlying string device object.\")]),t._v(\" \"),e(\"li\",[t._v(\"Method str(string) Sets the contents of underlying string device object.\")])]),t._v(\" \"),e(\"p\",[t._v(\"Its header file is sstream.\")]),t._v(\" \"),e(\"p\",[t._v('One common use of this class is to parse comma-separated integers from a string (e.g., \"23,4,56\").')]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('stringstream ss(\"23,4,56\");\\nchar ch;\\nint a, b, c;\\nss >> a >> ch >> b >> ch >> c;  // a = 23, b = 4, c = 56\\n')])])]),e(\"p\",[t._v(\"You have to complete the function vector parseInts(string str). str will be a string consisting of comma-separated integers, and you have to return a vector of int representing the integers.\")]),t._v(\" \"),e(\"p\",[t._v(\"Note If you want to know how to push elements in a vector, solve the first problem in the STL chapter.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-12\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-12\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"The first and only line consists of n integers separated by commas.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-12\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-12\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Print the integers after parsing it.\")]),t._v(\" \"),e(\"p\",[t._v(\"P.S.: I/O will be automatically handled. You need to complete the function only.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-9\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-9\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"23,4,56\\n\")])])]),e(\"h4\",{attrs:{id:\"sample-output-10\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-10\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"23\\n4\\n56\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-12\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-12\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <sstream>\\n#include <vector>\\n#include <iostream>\\nusing namespace std;\\n\\nvector<int> parseInts(string str) {\\n    vector<int> vec;\\n    stringstream ss(str);\\n    char ch;\\n    int temp;\\n\\n    while(ss) {\\n        ss>>temp>>ch;\\n        vec.push_back(temp);\\n    }\\n\\n    return vec;\\n}\\n\\nint main() {\\n    string str;\\n    cin >> str;\\n    vector<int> integers = parseInts(str);\\n    for(int i = 0; i < integers.size(); i++) {\\n        cout << integers[i] << \"\\\\n\";\\n    }\\n\\n    return 0;\\n}\\n')])])]),e(\"h2\",{attrs:{id:\"structs\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#structs\"}},[t._v(\"#\")]),t._v(\" Structs\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-13\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-13\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"struct is a way to combine multiple fields to represent a composite data structure, which further lays the\\nfoundation for Object Oriented Programming. For example, we can store details related to a student in a\\nstruct consisting of his age (int), first_name (string), last_name (string) and standard (int).\")]),t._v(\" \"),e(\"p\",[t._v(\"struct can be represented as\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"struct NewType {\\ntype1 value1;\\ntype2 value2;\\n.\\n.\\n.\\ntypeN valueN;\\n};\\n\")])])]),e(\"p\",[t._v(\"You have to create a struct, named Student, representing the student's details, as mentioned above, and\\nstore the data of a student.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-13\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-13\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Input will consist of four lines.\\nThe first line will contain an integer, representing age.\\nThe second line will contain a string, consisting of lower-case Latin characters ('a'-'z'), representing the\\nfirst_name of a student.\\nThe third line will contain another string, consisting of lower-case Latin characters ('a'-'z'), representing\\nthe last_name of a student.\\nThe fourth line will contain an integer, representing the standard of student.\")]),t._v(\" \"),e(\"p\",[t._v(\"Note: The number of characters in first_name and last_name will not exceed 50.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-13\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-13\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Output will be of a single line, consisting of age, first_name, last_name and standard, each separated by\\none white space.\")]),t._v(\" \"),e(\"p\",[t._v(\"P.S.: I/O will be handled by HackerRank.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-10\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-10\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"15\\njohn\\ncarmack\\n10\\n\")])])]),e(\"h4\",{attrs:{id:\"sample-output-11\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-11\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"15 john carmack 10\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-13\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-13\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <cmath>\\n#include <cstdio>\\n#include <vector>\\n#include <string>\\n#include <iostream>\\n#include <algorithm>\\nusing namespace std;\\n\\nstruct Student {\\n    int age;\\n    string first_name;\\n    string last_name;\\n    string standard;\\n};\\n\\nint main() {\\n    Student st;\\n\\n    cin >> st.age >> st.first_name >> st.last_name >> st.standard;\\n    cout << st.age << \" \" << st.first_name << \" \" << st.last_name << \" \" << st.standard;\\n\\n    return 0;\\n}\\n\\n\\n')])])]),e(\"h2\",{attrs:{id:\"class\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#class\"}},[t._v(\"#\")]),t._v(\" Class\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-14\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-14\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"Classes in C++ are user defined types declared with keyword class that has data and functions. Although\\nclasses and structures have the same type of functionality, there are some basic differences. The data\\nmembers of a class are private by default and the members of a structure are public by default. Along\\nwith storing multiple data in a common block, it also assigns some functions (known as methods) to\\nmanipulate/access them. It serves as the building block of Object Oriented Programming.\")]),t._v(\" \"),e(\"p\",[t._v(\"It also has access specifiers, which restrict the access of member elements. The primarily used ones are\\nthe following:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"public: Public members (variables, methods) can be accessed from anywhere the code is visible.\\nprivate: Private members can be accessed only by other member functions, and it can not be\\naccessed outside of class.\\n\")])])]),e(\"p\",[t._v(\"Class can be represented in the form of\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"class ClassName {\\naccess_specifier1:\\ntype1 val1;\\ntype2 val2;\\nret_type1 method1(type_arg1 arg1, type_arg2 arg2,...)\\n...\\naccess_specifier2:\\ntype3 val3;\\ntype4 val4;\\nret_type2 method2(type_arg3 arg3, type_arg4 arg4,...)\\n...\\n};\\n\")])])]),e(\"p\",[t._v(\"It's a common practice to make all variables private, and set/get them using public methods. For\\nexample:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"class SampleClass {\\nprivate:\\nint val;\\npublic:\\nvoid set(int a) {\\nval = a;\\n}\\nint get() {\\nreturn val;\\n}\\n};\\n\")])])]),e(\"p\",[t._v(\"We can store details related to a student in a class consisting of his age (int), first_name (string),\\nlast_name (string) and standard (int).\")]),t._v(\" \"),e(\"p\",[t._v(\"You have to create a class, named Student, representing the student's details, as mentioned above, and\\nstore the data of a student. Create setter and getter functions for each element; that is, the class should\\nat least have following functions:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"get_age, set_age\\nget_first_name, set_first_name\\nget_last_name, set_last_name\\nget_standard, set_standard\\n\")])])]),e(\"p\",[t._v(\"Also, you have to create another method to_string() which returns the string consisting of the above\\nelements, separated by a comma(,). You can refer to stringstream for this.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-14\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-14\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Input will consist of four lines.\\nThe first line will contain an integer, representing the age. The second line will contain a string, consisting\\nof lower-case Latin characters ('a'-'z'), representing the first_name of a student.\\nThe third line will contain another string, consisting of lower-case Latin characters ('a'-'z'), representing\\nthe last_name of a student.\\nThe fourth line will contain an integer, representing the standard of student.\")]),t._v(\" \"),e(\"p\",[t._v(\"Note: The number of characters in first_name and last_name will not exceed 50.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-14\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-14\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"The code provided by HackerRank will use your class members to set and then get the elements of the\\nStudent class.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-11\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-11\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"15\\njohn\\ncarmack\\n10\\n\")])])]),e(\"h4\",{attrs:{id:\"sample-output-12\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-12\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"15\\ncarmack, john\\n10\\n15,john,carmack,\\n\")])])]),e(\"h3\",{attrs:{id:\"solution-14\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-14\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <iostream>\\n#include <sstream>\\n#include <string>\\nusing namespace std;\\n\\nclass Student{\\n    int age;\\n    int standard;\\n    string first_name;\\n    string last_name;\\n\\npublic:\\n    void set_age(int a) {\\n        age= a;\\n    }\\n    int get_age() {\\n        return age;\\n    }\\n    int get_standard() {\\n        return standard;\\n    }\\n    string get_first_name() {\\n        return first_name;\\n    }\\n    string get_last_name() {\\n        return last_name;\\n    }\\n    void set_standard(int a) {\\n        standard =a;\\n    }\\n    void set_first_name(string a) {\\n        first_name =a;\\n    }\\n    void set_last_name(string a) {\\n        last_name =a;\\n    }\\n    string to_string()\\n    {\\n        stringstream ss;\\n        char c = \\',\\';\\n        ss << age << c << first_name << c << last_name << c << standard;\\n        return ss.str();\\n    }\\n};\\n\\nint main() {\\n    int age, standard;\\n    string first_name, last_name;\\n\\n    cin >> age >> first_name >> last_name >> standard;\\n\\n    Student st;\\n    st.set_age(age);\\n    st.set_standard(standard);\\n    st.set_first_name(first_name);\\n    st.set_last_name(last_name);\\n\\n    cout << st.get_age() << \"\\\\n\";\\n    cout << st.get_last_name() << \", \" << st.get_first_name() << \"\\\\n\";\\n    cout << st.get_standard() << \"\\\\n\";\\n    cout << \"\\\\n\";\\n    cout << st.to_string();\\n\\n    return 0;\\n}\\n\\n\\n')])])]),e(\"h2\",{attrs:{id:\"classes-and-objects\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#classes-and-objects\"}},[t._v(\"#\")]),t._v(\" Classes and Objects\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-15\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-15\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"A class defines a blueprint for an object. We use the same syntax to declare objects of a class as we use\\nto declare variables of other basic types. For example:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"Box box1; // Declares variable box1 of type BoxBox box2; // Declare variable box2 of type Box\\n\")])])]),e(\"p\",[t._v(\"Kristen is a contender for valedictorian of her high school. She wants to know how many students (if any)\\nhave scored higher than her in the exams given during this semester.\\nCreate a class named with the following specifications:\\nAn instance variable named to hold a student's exam scores.\\nA void input() function that reads integers and saves them to.\\nAn int calculateTotalScore() function that returns the sum of the student's scores.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-15\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-15\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Most of the input is handled for you by the locked code in the editor.\\nIn the void Student::input() function, you must read scores from stdin and save them to your\\ninstance variable.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"constraints-3\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#constraints-3\"}},[t._v(\"#\")]),t._v(\" Constraints\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-15\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-15\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"In the int Student::calculateTotalScore() function, you must return the student's total grade (the sum of\\nthe values in ).\\nThe locked code in the editor will determine how many scores are larger than Kristen's and print that\\nnumber to the console.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-12\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-12\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"p\",[t._v(\"The first line contains , the number of students in Kristen's class. The subsequent lines contain each\\nstudent's exam grades for this semester.\")]),t._v(\" \"),e(\"p\",[t._v(\"(^3) 30 40 45 10 10\\n40 40 40 10 1050 20 30 10 10\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-output-13\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-13\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"p\",[t._v(\"1\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"explanation-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#explanation-2\"}},[t._v(\"#\")]),t._v(\" Explanation\")]),t._v(\" \"),e(\"p\",[t._v(\"Kristen's grades are on the first line of grades. Only student scored higher than her.\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"solution-15\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-15\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"#include <cmath>\\n#include <cstdio>\\n#include <vector>\\n#include <iostream>\\n#include <algorithm>\\n#include <cassert>\\nusing namespace std;\\n\\nclass Student{\\nprivate:\\n    int scores[5];\\n    int sum;\\npublic:\\n    int calculateTotalScore() {\\n        return sum;\\n    }\\n    void input() {\\n        for(int i=0; i<5; i++) {\\n            cin >> scores[i];\\n            sum+=scores[i];\\n        }\\n    }\\n};\\n\\nint main() {\\n    int n; // number of students\\n    cin >> n;\\n    Student *s = new Student[n]; // an array of n students\\n\\n    for(int i = 0; i < n; i++){\\n        s[i].input();\\n    }\\n\\n    // calculate kristen's score\\n    int kristen_score = s[0].calculateTotalScore();\\n\\n    // determine how many students scored higher than kristen\\n    int count = 0;\\n    for(int i = 1; i < n; i++){\\n        int total = s[i].calculateTotalScore();\\n        if(total > kristen_score){\\n            count++;\\n        }\\n    }\\n\\n    // print result\\n    cout << count;\\n\\n    return 0;\\n}\\n\")])])]),e(\"h2\",{attrs:{id:\"box-it\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#box-it\"}},[t._v(\"#\")]),t._v(\" Box it\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-16\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-16\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"Design a class named Box whose dimensions are integers and private to the class. The dimensions are\\nlabelled: length , breadth , and height.\\nThe default constructor of the class should initialize , , and to.\\nThe parameterized constructor Box(int length, int breadth, int height) should initialize Box's and to\\nlength, breadth and height.\\nThe copy constructor BoxBox ) should set and to 's and , respectively.\\nApart from the above, the class should have functions:\\nint getLength() - Return box's length\\nint getBreadth() - Return box's breadth\\nint getHeight() - Return box's height\\nlong long CalculateVolume() - Return the volume of the box\\nOverload the operator for the class Box. Box Box if:\")]),t._v(\" \"),e(\"ol\",[e(\"li\",[t._v(\"<\")]),t._v(\" \"),e(\"li\",[t._v(\"< and ==\")]),t._v(\" \"),e(\"li\",[t._v(\"< and == and ==\\nOverload operator for the class Box().\\nIf is an object of class Box:\\nshould print , and on a single line separated by spaces.\")])]),t._v(\" \"),e(\"h4\",{attrs:{id:\"constraints-4\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#constraints-4\"}},[t._v(\"#\")]),t._v(\" Constraints\")]),t._v(\" \"),e(\"p\",[t._v(\"Two boxes being compared using the operator will not have all three dimensions equal.\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"solution-16\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-16\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include<bits/stdc++.h>\\n\\nusing namespace std;\\n//Implement the class Box\\n//l,b,h are integers representing the dimensions of the box\\n\\n// The class should have the following functions :\\n\\n// Constructors:\\n// Box();\\n// Box(int,int,int);\\n// Box(Box);\\n\\n\\n// int getLength(); // Return box\\'s length\\n// int getBreadth (); // Return box\\'s breadth\\n// int getHeight ();  //Return box\\'s height\\n// long long CalculateVolume(); // Return the volume of the box\\n\\n//Overload operator < as specified\\n//bool operator<(Box& b)\\n\\n//Overload operator << as specified\\n//ostream& operator<<(ostream& out, Box& B)\\nclass Box{\\nprivate:\\n    int l, b, h;\\npublic:\\n    Box(){\\n        l = 0;\\n        b = 0;\\n        h = 0;\\n    }\\n    Box(int length, int breadth, int height){\\n        l = length;\\n        b = breadth;\\n        h = height;\\n    }\\n    Box(const Box& B){\\n        l = B.l;\\n        b = B.b;\\n        h = B.h;\\n    }\\n\\n    int getLenght(){\\n        return l;\\n    }\\n    int getBreadth(){\\n        return b;\\n    }\\n    int getHeight(){\\n        return h;\\n    }\\n    long long CalculateVolume(){\\n        return (long long)l*b*h;\\n    }\\n\\n    friend bool operator < ( Box&A,Box& B){\\n        if( (A.l < B.l) || ((A.b < B.b) && (A.l == B.l)) || ((A.h < B.h) && (A.l == B.l) && (A.b == B.b)) ){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    };\\n\\n    friend ostream& operator<< (ostream& output, const Box& B){\\n        output << B.l << \" \" << B.b << \" \" << B.h;\\n        return output;\\n    }\\n};\\n\\nvoid check2()\\n{\\n    int n;\\n    cin>>n;\\n    Box temp;\\n    for(int i=0;i<n;i++)\\n    {\\n        int type;\\n        cin>>type;\\n        if(type ==1)\\n        {\\n            cout<<temp<<endl;\\n        }\\n        if(type == 2)\\n        {\\n            int l,b,h;\\n            cin>>l>>b>>h;\\n            Box NewBox(l,b,h);\\n            temp=NewBox;\\n            cout<<temp<<endl;\\n        }\\n        if(type==3)\\n        {\\n            int l,b,h;\\n            cin>>l>>b>>h;\\n            Box NewBox(l,b,h);\\n            if(NewBox<temp)\\n            {\\n                cout<<\"Lesser\\\\n\";\\n            }\\n            else\\n            {\\n                cout<<\"Greater\\\\n\";\\n            }\\n        }\\n        if(type==4)\\n        {\\n            cout<<temp.CalculateVolume()<<endl;\\n        }\\n        if(type==5)\\n        {\\n            Box NewBox(temp);\\n            cout<<NewBox<<endl;\\n        }\\n\\n    }\\n}\\n\\nint main()\\n{\\n    check2();\\n}\\n')])])]),e(\"h2\",{attrs:{id:\"vector-sort\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vector-sort\"}},[t._v(\"#\")]),t._v(\" Vector-Sort\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"challange-17\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#challange-17\"}},[t._v(\"#\")]),t._v(\" Challange\")]),t._v(\" \"),e(\"p\",[t._v(\"You are given integers.Sort the integers and print the sorted order.\\nStore the integers in a vector.Vectors are sequence containers representing arrays that can change in\\nsize.\\nDeclaration:\\nvector\"),e(\"int\",[t._v(\"v; (creates an empty vector of integers)\\nSize:\\nint size=v.size();\\nPushing an integer into a vector:\\nv.push_back(x);(where x is an integer.The size increases by 1 after this.)\\nPopping the last element from the vector:\\nv.pop_back(); (After this the size decreases by 1)\\nSorting a vector:\\nsort(v.begin(),v.end()); (Will sort all the elements in the vector)\")])],1),t._v(\" \"),e(\"p\",[t._v(\"To know more about vectors, Click Here\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"input-format-16\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#input-format-16\"}},[t._v(\"#\")]),t._v(\" Input Format\")]),t._v(\" \"),e(\"p\",[t._v(\"The first line of the input contains where is the number of integers. The next line contains\\nintegers.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"constraints-5\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#constraints-5\"}},[t._v(\"#\")]),t._v(\" Constraints\")]),t._v(\" \"),e(\"p\",[t._v(\", where is the integer in the vector.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"output-format-16\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#output-format-16\"}},[t._v(\"#\")]),t._v(\" Output Format\")]),t._v(\" \"),e(\"p\",[t._v(\"Print the integers in the sorted order one by one in a single line followed by a space.\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-input-13\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-input-13\"}},[t._v(\"#\")]),t._v(\" Sample Input\")]),t._v(\" \"),e(\"p\",[t._v(\"(^5) 1 6 10 8 4\")]),t._v(\" \"),e(\"h4\",{attrs:{id:\"sample-output-14\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sample-output-14\"}},[t._v(\"#\")]),t._v(\" Sample Output\")]),t._v(\" \"),e(\"p\",[t._v(\"1 4 6 8 10\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"solution-17\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#solution-17\"}},[t._v(\"#\")]),t._v(\" Solution\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('#include <cmath>\\n#include <cstdio>\\n#include <vector>\\n#include <iostream>\\n#include <algorithm>\\nusing namespace std;\\n\\n\\nint main() {\\n    int count;\\n    vector<int>v;\\n    cin >> count;\\n    for(int i=0;i<count;i++) {\\n        int temp;\\n        cin >> temp;\\n        v.push_back(temp);\\n    }\\n    sort(v.begin(), v.end());\\n    for (auto i = v.begin(); i != v.end(); ++i)\\n        cout << *i << \" \";\\n\\n    return 0;\\n}\\n\\n')])])]),e(\"p\",[t._v(\"Happy Coding\")])])}),[],!1,null,null,null);a.default=s.exports}}]);","extractedComments":[]}